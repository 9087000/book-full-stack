{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookServiceService {\n  constructor(http) {\n    this.http = http;\n    this.booksSubject = new BehaviorSubject([]);\n  }\n  get books() {\n    return this.booksSubject;\n  }\n  chooseBook(book) {\n    this.selectedBook = book;\n  }\n  fetchBooks() {\n    const url = 'http://localhost:8080/books';\n    this.http.get(url).subscribe(data => {\n      this.booksSubject.next(data);\n    });\n  }\n  delete() {\n    const url = 'http://localhost:8080/books/' + this.selectedBook?.id;\n    this.http.delete(url).subscribe(response => {\n      if (response === 0) console.log(\"This book doesn't exist\");\n      if (response === 1) console.log(\"Deleted successfully\");\n    });\n  }\n  update(book) {\n    const url = 'http://localhost:8080/books/' + book.id;\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.put(url, book, {\n      headers\n    });\n  }\n  add(book) {\n    const url = 'http://localhost:8080/books';\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.post(url, book, {\n      headers\n    });\n  }\n}\nBookServiceService.ɵfac = function BookServiceService_Factory(t) {\n  return new (t || BookServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookServiceService,\n  factory: BookServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,eAAe,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,kBAAkB;EAK7BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,iBAAY,GAA2B,IAAIH,eAAe,CAAQ,EAAE,CAAC;EAI7E;EAEA,IAAII,KAAK;IACP,OAAO,IAAI,CAACC,YAAY;EAC1B;EAEAC,UAAU,CAACC,IAAS;IAClB,IAAI,CAACC,YAAY,GAAGD,IAAI;EAC1B;EAEAE,UAAU;IACR,MAAMC,GAAG,GAAG,6BAA6B;IACzC,IAAI,CAACP,IAAI,CAACQ,GAAG,CAACD,GAAG,CAAC,CAACE,SAAS,CACzBC,IAAS,IAAI;MACZ,IAAI,CAACR,YAAY,CAACS,IAAI,CAACD,IAAI,CAAC;IAC9B,CAAC,CAAC;EACN;EAEAE,MAAM;IACJ,MAAML,GAAG,GAAG,8BAA8B,GAAG,IAAI,CAACF,YAAY,EAAEQ,EAAE;IAClE,IAAI,CAACb,IAAI,CAACY,MAAM,CAACL,GAAG,CAAC,CAACE,SAAS,CAACK,QAAQ,IAAG;MACzC,IAAIA,QAAQ,KAAK,CAAC,EAAEC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MAC1D,IAAIF,QAAQ,KAAK,CAAC,EAAEC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACzD,CAAC,CAAC;EACJ;EAEAC,MAAM,CAACb,IAAU;IACf,MAAMG,GAAG,GAAG,8BAA8B,GAAGH,IAAI,CAACS,EAAE;IACpD,MAAMK,OAAO,GAAG,IAAItB,WAAW,EAAE,CAACuB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzE,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAACb,GAAG,EAAEH,IAAI,EAAE;MAAEc;IAAO,CAAE,CAAC;EAC9C;EAEAG,GAAG,CAACjB,IAAU;IACZ,MAAMG,GAAG,GAAG,6BAA6B;IACzC,MAAMW,OAAO,GAAG,IAAItB,WAAW,EAAE,CAACuB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzE,OAAO,IAAI,CAACnB,IAAI,CAACsB,IAAI,CAACf,GAAG,EAAEH,IAAI,EAAE;MAAEc;IAAO,CAAE,CAAC;EAC/C;;AA1CWpB,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAyB,SAAlBzB,kBAAkB;EAAA0B,YAFjB;AAAM","names":["HttpHeaders","BehaviorSubject","BookServiceService","constructor","http","books","booksSubject","chooseBook","book","selectedBook","fetchBooks","url","get","subscribe","data","next","delete","id","response","console","log","update","headers","set","put","add","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\mukul\\Downloads\\BookLibrary-main\\bookLibrary-frontend\\src\\app\\book-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Book } from './BookInterface';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookServiceService {\n\n  private booksSubject: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  selectedBook?: Book;\n\n  constructor(private http: HttpClient) {\n  }\n\n  get books(): BehaviorSubject<any[]> {\n    return this.booksSubject;\n  }\n\n  chooseBook(book: any) {\n    this.selectedBook = book;\n  }\n\n  fetchBooks() {\n    const url = 'http://localhost:8080/books';\n    this.http.get(url).subscribe(\n      (data: any) => {\n        this.booksSubject.next(data)\n      });\n  }\n\n  delete() {\n    const url = 'http://localhost:8080/books/' + this.selectedBook?.id;\n    this.http.delete(url).subscribe(response => {\n      if (response === 0) console.log(\"This book doesn't exist\");\n      if (response === 1) console.log(\"Deleted successfully\");\n    });\n  }\n\n  update(book: Book) {\n    const url = 'http://localhost:8080/books/' + book.id;\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.put(url, book, { headers });\n  }\n\n  add(book: Book) {\n    const url = 'http://localhost:8080/books';\n    const headers = new HttpHeaders().set('Content-Type', 'application/json');\n    return this.http.post(url, book, { headers })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}